#+TITLE:     Machine Learning and Data Analysis with Python
#+AUTHOR:    Derek Harter
#+EMAIL:     derek@harter.pro
#+DATE:      CSci 538  Fall 2013 <2013-08-18 Sun>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \usepackage{minted}
#+latex_header: \usemintedstyle{emacs}
#+latex_header: \usepackage{textpos}
#+latex_header: \addtobeamertemplate{frametitle}{}{%
#+latex_header: \begin{textblock*}{100mm}(.89\textwidth,-1cm)
#+latex_header: \includegraphics[height=0.9cm]{figs/tamuc-logo.eps}
#+latex_header: \end{textblock*}}
#+latex_header: \title[CSci538: Machine Learning]{Machine Learning and Data Analysis with Python}
#+latex_header: \institute[TAMUC]{\includegraphics[height=0.9cm]{figs/tamuc-logo.eps}}
* Introduction to Python

** Additional Resources
The following are additional resources, all free and available online, that you should use to learn Python.

   - [[http://www.greenteapress.com/thinkpython][Think Python: How to think like a computer scientist]]  http://www.greenteapress.com/thinkpython
     A free but actually professionally done and published textbook.  
   - [[https://developers.google.com/edu/python][Google Developers Python Class]] https://developers.google.com/edu/python
     A short course from Google, but has a good set of videos to cover the basics.
   - [[http://software-carpentry.org/v4/python/index.html][Software Carpentry Python Lectures]] http://software-carpentry.org/v4/python/index.html
     Well done video lectures part of a larger course on scientific software development.


** Declaring Variables

*** variables 					      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
   - Python is a high-level interpreted language.  
   - Python does not force you to declare variable types.
   - Type is inferred from assigned value. 
   - Python manages memory for you, will garbage collect unreferenced data.
*** Variable Declaration 				    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :BEAMER_env: block
    :END:
#+name: variables
#+begin_src python :results output :exports both
x = 1
y = x + 3
print x, y
print type(x)
#+end_src

#+RESULTS: variables
: 2744
: False


** Operations on Variables

*** operators 					      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:
   - Python includes all of the arithmetic and boolean operations with same syntax as C, Java, etc.
   - Arithmetic operators use standard order of precedence: () ** * / % + -
   - Boolean operators: == != < > <= >=
*** Operators Example 					    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :BEAMER_env: block
    :END:
#+name: operators
#+begin_src python :results output :exports both
x = (3 + 5) * 2 ** 3
print x
print x <= 5
#+end_src

#+RESULTS: operators
: 64
: False




** Functions

*** functions 					      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
   - A function is a named sequence of statements that performs a computation.
   - Python uses def to define a new function.
   - All Python functions return results, if you don't specify result using
     return, then None is returned as function value.
*** Function Example 					    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: block
    :END:
\fontsize{6}{7.2}\selectfont
#+name: functions
#+begin_src python :results output :exports both
def sum_ceiling(x, y, z, ceiling):
    """Return the sum of x+y+z if it is less than
    maximum ceiling.  Otherwise return the ceiling"""
    s = x + y + z
    if s < ceiling:
        return s
    else:
        return ceiling

print sum_ceiling(3, 8, 11, 20)
print sum_ceiling(1, 2, 3, 99)
#+end_src

#+RESULTS: functions
: 20
: 6





** Built In Data Structures: Lists
   
*** lists 					      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
   - Lists are sequences of values.
   - The list values do not have to be of the same type (unlike a C or Java array).
   - Lists are indexed by an integer value, starting at 0.
   - Lists can be changed, values added or removed, etc.

*** List Example 					    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: block
    :END:
\fontsize{6}{7.2}\selectfont
#+name: lists
#+begin_src python :results output :exports both
states = ['Alaska', 'Alabama', 'Texas', 'Mississippi']
print states[0]  # first item in list
print states[1:3] # items 1 up to but not including 3 of list
print states[-1] # last item in list
states[2] = 'California'
print states
#+end_src

#+RESULTS: lists
: Alaska
: ['Alabama', 'Texas']
: Mississippi
: ['Alaska', 'Alabama', 'California', 'Mississippi']









** Built In Data Structures: Dictionaries

*** dictionaries 				      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
   - Dictionaries map an arbitrary key to a value (key->value pair).
   - Dictionaries are mutable, values can be changed, added or removed.

*** Dictionary Example 					    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: block
    :END:
\fontsize{6}{7.2}\selectfont
#+name: dictionaries
#+begin_src python :results output :exports both
phone_number = {'John': '818-922-2381',
                'Susan': '414-938-1923',
                'Ray': 9034541238}
print phone_number['Ray']
phone_number['Alice'] = 8184531923
print phone_number
#+end_src

#+RESULTS: dictionaries
: 9034541238
: {'John': '818-922-2381', 'Ray': 9034541238, 'Alice': 8184531923, 'Susan': '414-938-1923'}











** Built In Data Structures: Tuples

*** tuples 					      :B_ignoreheading:BMCOL:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.4
    :END:
   - Tuples are immutable lists, they can't be changed.
   - We mention because you will run across them early, for example to return 
     multiple values from a function, Python programmers often return a tuple of values.

*** Tuples Example 					    :BMCOL:B_example:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :BEAMER_env: block
    :END:
\fontsize{6}{7.2}\selectfont
#+name: tuples
#+begin_src python :results output :exports both
def find_min_max(l):
    """Return the minumum and maximum values in the list l"""
    minimum = min(l)
    maximum = max(l)
    return (minimum,maximum)

l,h = find_min_max([9, 8, 2, 11, 42, 10])
print "Minimum was: ", l
print "Maximum was: ", h
#+end_src

#+RESULTS: tuples
: Minimum was:  2
: Maximum was:  42










